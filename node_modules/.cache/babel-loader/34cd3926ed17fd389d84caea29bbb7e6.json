{"ast":null,"code":"import _slicedToArray from \"/Users/fe.oliveira/Documents/Dev/git/roteirizador/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n *  Verifica se e um email valido\n *\n *  @param string email\n *\n *  @return bool\n */\nexport const checkEmail = email => {\n  let validEmailRegex = RegExp(/^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i);\n  return validEmailRegex.test(email) ? true : false;\n};\n/**\n *  Verifica se e um nome completo( com nome e sobrenome )\n *\n *  @param string full_name\n *\n *  @return bool\n */\n\nexport const checkFullName = full_name => {\n  full_name = full_name.trim();\n\n  let _full_name$split = full_name.split(' '),\n      _full_name$split2 = _slicedToArray(_full_name$split, 2),\n      name = _full_name$split2[0],\n      last_name = _full_name$split2[1];\n\n  return name && name.length > 2 && last_name && last_name.length > 2 ? true : false;\n};\n/**\n *  Verifica se e um password valido\n *\n *  @param string password\n *\n *  @return bool\n */\n\nexport const checkPassword = password => {\n  password = password.trim();\n  return password.length > 7 ? true : false;\n};\n/**\n *  Verifica se tem algo digitado\n *\n *  @param string value\n *\n *  @return bool\n */\n\nexport const checkHasValue = value => {\n  return value && value !== \"\" && value !== null && value !== undefined ? true : false;\n};","map":{"version":3,"sources":["/Users/fe.oliveira/Documents/Dev/git/roteirizador/src/utils/formValidate.js"],"names":["checkEmail","email","validEmailRegex","RegExp","test","checkFullName","full_name","trim","split","name","last_name","length","checkPassword","password","checkHasValue","value","undefined"],"mappings":";;AAAA;;;;;;;AAOA,OAAO,MAAMA,UAAU,GAAKC,KAAF,IAAa;AAErC,MAAIC,eAAe,GAAGC,MAAM,CAAC,sHAAD,CAA5B;AAEA,SAAOD,eAAe,CAACE,IAAhB,CAAqBH,KAArB,IACD,IADC,GAED,KAFN;AAID,CARM;AAUP;;;;;;;;AAOA,OAAO,MAAMI,aAAa,GAAKC,SAAF,IAAiB;AAE5CA,EAAAA,SAAS,GAAGA,SAAS,CAACC,IAAV,EAAZ;;AAF4C,yBAIlBD,SAAS,CAACE,KAAV,CAAgB,GAAhB,CAJkB;AAAA;AAAA,MAItCC,IAJsC;AAAA,MAIhCC,SAJgC;;AAM5C,SAAOD,IAAI,IAAIA,IAAI,CAACE,MAAL,GAAc,CAAtB,IAA2BD,SAA3B,IAAwCA,SAAS,CAACC,MAAV,GAAmB,CAA3D,GACD,IADC,GAED,KAFN;AAID,CAVM;AAYP;;;;;;;;AAOA,OAAO,MAAMC,aAAa,GAAKC,QAAF,IAAgB;AAE3CA,EAAAA,QAAQ,GAAGA,QAAQ,CAACN,IAAT,EAAX;AAEA,SAAOM,QAAQ,CAACF,MAAT,GAAkB,CAAlB,GACD,IADC,GAED,KAFN;AAID,CARM;AAUP;;;;;;;;AAOA,OAAO,MAAMG,aAAa,GAAKC,KAAF,IAAa;AAExC,SAAOA,KAAK,IAAIA,KAAK,KAAK,EAAnB,IAAyBA,KAAK,KAAK,IAAnC,IAA2CA,KAAK,KAAKC,SAArD,GACG,IADH,GAEG,KAFV;AAID,CANM","sourcesContent":["/**\n *  Verifica se e um email valido\n *\n *  @param string email\n *\n *  @return bool\n */\nexport const checkEmail = ( email ) => {\n\n  let validEmailRegex = RegExp(/^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i);\n\n  return validEmailRegex.test(email)\n      ? true\n      : false;\n\n}\n\n/**\n *  Verifica se e um nome completo( com nome e sobrenome )\n *\n *  @param string full_name\n *\n *  @return bool\n */\nexport const checkFullName = ( full_name ) => {\n\n  full_name = full_name.trim()\n\n  let [ name, last_name ] = full_name.split(' ');\n\n  return name && name.length > 2 && last_name && last_name.length > 2\n      ? true\n      : false;\n\n}\n\n/**\n *  Verifica se e um password valido\n *\n *  @param string password\n *\n *  @return bool\n */\nexport const checkPassword = ( password ) => {\n\n  password = password.trim()\n\n  return password.length > 7\n      ? true\n      : false;\n\n}\n\n/**\n *  Verifica se tem algo digitado\n *\n *  @param string value\n *\n *  @return bool\n */\nexport const checkHasValue = ( value ) => {\n\n  return value && value !== \"\" && value !== null && value !== undefined\n          ? true\n          : false;\n\n}\n"]},"metadata":{},"sourceType":"module"}