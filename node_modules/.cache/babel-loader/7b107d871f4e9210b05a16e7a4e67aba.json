{"ast":null,"code":"export const loadDirections = arr_route => {\n  return new Promise(async (resolve, reject) => {\n    if (arr_route && arr_route.length > 0) {\n      const directionsService = new window.google.maps.DirectionsService();\n      var origin,\n          destination = null;\n      var waypoints = [];\n      let count = 0;\n\n      for (let i in arr_route) {\n        if (arr_route[i].metadata && arr_route[i].metadata.lat) {\n          if (count === 0) {\n            origin = {\n              lat: arr_route[i].metadata.lat,\n              lng: arr_route[i].metadata.lng\n            };\n          } else if (count === 1) {\n            destination = {\n              lat: arr_route[i].metadata.lat,\n              lng: arr_route[i].metadata.lng\n            };\n          } else {\n            waypoints.push({\n              location: arr_route[i].metadata.lat + \",\" + arr_route[i].metadata.lng,\n              stopover: true\n            });\n          }\n\n          count++;\n        }\n      }\n\n      directionsService.route({\n        origin: origin,\n        destination: destination,\n        waypoints: waypoints,\n        optimizeWaypoints: true,\n        travelMode: window.google.maps.TravelMode.DRIVING\n      }, (result, status) => {\n        if (status === window.google.maps.DirectionsStatus.OK) {\n          if (result.routes && result.routes[0] && result.routes[0].legs) {\n            console.log('preview');\n            console.log(result.routes[0].legs);\n            console.log('final');\n          }\n\n          resolve({\n            success: true,\n            metadata: result\n          });\n        } else {\n          resolve({\n            success: false,\n            metadata: result\n          });\n        }\n      });\n    } else {\n      resolve({\n        success: true,\n        metadata: []\n      });\n    }\n  });\n};","map":{"version":3,"sources":["/Users/fe.oliveira/Documents/Dev/React/roteirizador/src/actions/mapAction.js"],"names":["loadDirections","arr_route","Promise","resolve","reject","length","directionsService","window","google","maps","DirectionsService","origin","destination","waypoints","count","i","metadata","lat","lng","push","location","stopover","route","optimizeWaypoints","travelMode","TravelMode","DRIVING","result","status","DirectionsStatus","OK","routes","legs","console","log","success"],"mappings":"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","sourcesContent":["export const loadDirections = ( arr_route ) => {\n\n  return new Promise( async (resolve, reject) => {\n\n    if( arr_route && arr_route.length > 0 ){\n\n      const directionsService = new window.google.maps.DirectionsService();\n\n      var origin, destination = null;\n      var waypoints = [];\n\n      let count = 0;\n      for( let i in arr_route ){\n\n        if( arr_route[i].metadata && arr_route[i].metadata.lat ){\n\n          if( count === 0 ){\n              origin = { lat: arr_route[i].metadata.lat, lng: arr_route[i].metadata.lng }\n          } else if( count === 1 ){\n              destination = { lat: arr_route[i].metadata.lat, lng: arr_route[i].metadata.lng }\n          } else {\n              waypoints.push( { location: arr_route[i].metadata.lat + \",\" + arr_route[i].metadata.lng, stopover: true } );\n          }\n\n          count++;\n\n        }\n\n      }\n\n      directionsService.route(\n        {\n          origin: origin,\n          destination: destination,\n          waypoints: waypoints,\n          optimizeWaypoints: true,\n          travelMode: window.google.maps.TravelMode.DRIVING\n        },\n        (result, status) => {\n          if (status === window.google.maps.DirectionsStatus.OK) {\n\n            if( result.routes && result.routes[0] && result.routes[0].legs ){\n                console.log('preview' )\n                console.log( result.routes[0].legs );\n                console.log('final' )\n            }\n\n            resolve({\n              success: true,\n              metadata: result\n            });\n\n          } else {\n\n            resolve({\n              success: false,\n              metadata: result\n            });\n\n          }\n        }\n      );\n\n    } else {\n\n      resolve({\n        success: true,\n        metadata: []\n      });\n\n    }\n\n  });\n\n}\n"]},"metadata":{},"sourceType":"module"}