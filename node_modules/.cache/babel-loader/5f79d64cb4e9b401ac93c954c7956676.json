{"ast":null,"code":"var _jsxFileName = \"/Users/fe.oliveira/Documents/Dev/git/roteirizador/src/components/FormRoterizador/index.js\";\nimport React, { Component } from 'react';\nimport Fields from './Fields';\nimport './index.css';\n\nclass FormRoterizador extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      route: [{\n        type: \"from\",\n        metadata: null,\n        remove: false\n      }, {\n        type: \"to\",\n        metadata: null,\n        remove: false\n      }]\n    };\n    this.addStop = this.addStop.bind(this);\n    this.removeStop = this.removeStop.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.updateStop = this.updateStop.bind(this);\n  }\n\n  addStop() {\n    let route = this.state.route;\n    let obj_route = {\n      type: \"to\",\n      metadata: null,\n      remove: true\n    };\n    route.push(obj_route);\n    this.setState({\n      route: route\n    });\n  }\n\n  removeStop(index) {\n    let route = this.state.route;\n    delete route[index];\n    this.setState({\n      route: route\n    });\n  }\n\n  updateStop(matadata, index) {\n    let route = this.state.route;\n    route[index].metadata = matadata;\n    this.setState({\n      route: route\n    });\n  }\n\n  processFields() {\n    let self = this;\n    let route = this.state.route;\n    let texts = this.props.texts;\n    return route.map((route, key) => {\n      return React.createElement(Fields, {\n        texts: texts,\n        key: key,\n        index: key,\n        type: route.type,\n        metadata: route.metadata,\n        remove: route.remove,\n        funcUpdate: self.updateStop,\n        funcButton: route.remove ? self.removeStop : self.addStop,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      });\n    });\n  }\n\n  async handleSubmit(e) {\n    e.preventDefault();\n    let _this$props = this.props,\n        funcUpdateMap = _this$props.funcUpdateMap,\n        form_error_messages = _this$props.form_error_messages;\n    let route = this.state.route;\n    let data_filled = true;\n\n    for (let i in route) {\n      if (route[i].metadata == null) {\n        data_filled = false;\n      }\n    }\n\n    if (data_filled) {\n      funcUpdateMap(route);\n    } else {\n      alert(form_error_messages.all_inputs_is_requited);\n    }\n  }\n\n  render() {\n    let texts = this.props.texts;\n    return React.createElement(\"form\", {\n      \"data-component\": \"form-roterizador\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, this.processFields(), React.createElement(\"button\", {\n      \"data-button-submit\": true,\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"icon-map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), texts.button_submit.text));\n  }\n\n}\n\nexport default FormRoterizador;","map":{"version":3,"sources":["/Users/fe.oliveira/Documents/Dev/git/roteirizador/src/components/FormRoterizador/index.js"],"names":["React","Component","Fields","FormRoterizador","constructor","props","state","route","type","metadata","remove","addStop","bind","removeStop","handleSubmit","updateStop","obj_route","push","setState","index","matadata","processFields","self","texts","map","key","e","preventDefault","funcUpdateMap","form_error_messages","data_filled","i","alert","all_inputs_is_requited","render","button_submit","text"],"mappings":"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","sourcesContent":["import React,\n      { Component } from 'react';\nimport Fields       from './Fields';\nimport './index.css';\n\nclass FormRoterizador extends Component {\n\n  constructor( props )\n  {\n\n    super();\n\n    this.state = {\n      route: [\n        {\n          type    : \"from\",\n          metadata: null,\n          remove  : false,\n        },\n        {\n          type    : \"to\",\n          metadata: null,\n          remove   : false,\n        }\n      ]\n    };\n\n    this.addStop    = this.addStop.bind(this);\n    this.removeStop = this.removeStop.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.updateStop = this.updateStop.bind(this);\n\n  }\n\n  addStop()\n  {\n\n    let { route } = this.state;\n    let obj_route = {\n      type    : \"to\",\n      metadata: null,\n      remove  : true,\n    };\n\n    route.push( obj_route );\n\n    this.setState({\n      route: route\n    });\n\n  }\n\n  removeStop( index )\n  {\n\n    let { route } = this.state;\n\n    delete( route[ index ] );\n\n    this.setState({\n      route: route\n    });\n\n  }\n\n  updateStop( matadata, index )\n  {\n\n    let { route } = this.state;\n\n    route[ index ].metadata = matadata;\n\n    this.setState({\n      route: route\n    });\n\n  }\n\n  processFields()\n  {\n\n    let self      = this;\n    let { route } = this.state;\n    let { texts } = this.props;\n\n    return route.map( ( route , key ) => {\n\n      return <Fields\n                texts     = { texts             }\n                key       = { key               }\n                index     = { key               }\n                type      = { route.type        }\n                metadata  = { route.metadata    }\n                remove    = { route.remove      }\n                funcUpdate= { self.updateStop   }\n                funcButton= { route.remove\n                                ? self.removeStop\n                                : self.addStop    }/>\n\n    });\n\n  }\n\n  async handleSubmit( e )\n  {\n\n    e.preventDefault();\n\n    let { funcUpdateMap,\n          form_error_messages } = this.props\n    let { route }               = this.state;\n    let data_filled             = true;\n\n    for( let i in route ){\n\n      if( route[i].metadata == null ) {\n        data_filled = false;\n      }\n\n    }\n\n    if( data_filled ){\n      funcUpdateMap( route )\n    } else {\n      alert( form_error_messages.all_inputs_is_requited );\n\n    }\n\n  }\n\n  render() {\n\n    let { texts } = this.props;\n\n    return (\n      <form data-component=\"form-roterizador\"\n            onSubmit={this.handleSubmit}>\n\n        {this.processFields()}\n\n        <button data-button-submit\n          type=\"submit\" >\n          <i className=\"icon-map\"></i>\n          {texts.button_submit.text}\n        </button>\n\n      </form>\n    );\n\n  }\n\n}\nexport default FormRoterizador;\n"]},"metadata":{},"sourceType":"module"}